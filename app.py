import streamlit as st
import numpy as np
import plotly.graph_objects as go
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4

# ---------- Page setup ----------
st.set_page_config(page_title="Soft Skills Assessment Quiz", page_icon="üß≠", layout="centered")

# ---------- Soft skills + emojis ----------
SKILLS = {
    "Empathie": "ü§ù",
    "Pens√©e critique": "üßê",
    "Adaptabilit√©": "ü¶é",
    "Confiance": "üîí",
    "Intelligence √©motionnelle": "üíñ",
    "Agilit√©": "‚ö°"
}

# Explanations for strengths
EXPLANATIONS = {
    "Empathie": "Tu comprends les autres et sais te mettre √† leur place.",
    "Pens√©e critique": "Tu analyses, questionnes et prends des d√©cisions rationnelles.",
    "Adaptabilit√©": "Tu es flexible et sais rebondir face aux impr√©vus.",
    "Confiance": "On peut compter sur toi, tu inspires la fiabilit√©.",
    "Intelligence √©motionnelle": "Tu g√®res tes √©motions et celles des autres avec finesse.",
    "Agilit√©": "Tu agis vite, tu prends des initiatives et tu avances."
}

# Tips for improvement
TIPS = {
    "Empathie": "Prends du temps pour √©couter activement et poser des questions ouvertes.",
    "Pens√©e critique": "Entra√Æne-toi √† questionner les hypoth√®ses et chercher des sources fiables.",
    "Adaptabilit√©": "Expose-toi volontairement √† des situations nouvelles pour renforcer ta flexibilit√©.",
    "Confiance": "Fixe-toi des petits d√©fis pour b√¢tir une fiabilit√© progressive.",
    "Intelligence √©motionnelle": "Travaille ta conscience √©motionnelle avec des exercices de respiration.",
    "Agilit√©": "Apprends √† tester rapidement des id√©es sans viser la perfection."
}

# ---------- Questions ----------
QUESTIONS = [
    {
        "id": 1,
        "text": "üöÄ Ton √©quipe s‚Äô√©crase sur Mars. Le g√©n√©rateur d‚Äôoxyg√®ne est HS. Premi√®re r√©action ?",
        "options": [
            ("V√©rifier comment va tout le monde", "Empathie"),
            ("Analyser la machine pour trouver une faille", "Pens√©e critique"),
            ("R√©utiliser du mat√©riel pour bricoler un plan B", "Adaptabilit√©"),
            ("Faire une blague pour calmer les esprits", "Intelligence √©motionnelle"),
        ],
    },
    {
        "id": 2,
        "text": "üê± Un coll√®gue envoie un GIF de chat qui tape au clavier √† 2h du matin. Ta r√©action ?",
        "options": [
            ("Lui envoyer un message demain pour v√©rifier s‚Äôil va bien", "Empathie"),
            ("Te demander pourquoi il bosse √† 2h du matin", "Pens√©e critique"),
            ("Penser que c‚Äôest juste un d√©calage horaire", "Adaptabilit√©"),
            ("R√©pondre avec un m√®me de soutien", "Intelligence √©motionnelle"),
        ],
    },
    {
        "id": 3,
        "text": "üì¶ En pleine r√©union, quelqu‚Äôun pose une bo√Æte ferm√©e √† cl√© sur la table. Que fais-tu ?",
        "options": [
            ("Demander si quelqu‚Äôun conna√Æt son histoire", "Confiance"),
            ("Essayer de l‚Äôouvrir comme une √©nigme", "Pens√©e critique"),
            ("Accepter qu‚Äôelle reste ferm√©e et passer √† autre chose", "Adaptabilit√©"),
            ("Proposer que ce soit la mascotte de l‚Äô√©quipe üòÇ", "Agilit√©"),
        ],
    },
    {
        "id": 4,
        "text": "‚úàÔ∏è Ton voyage de r√™ve est annul√© la veille du d√©part. R√©action ?",
        "options": [
            ("Refaire direct un plan B", "Adaptabilit√©"),
            ("V√©rifier si tes potes sont pas trop d√©√ßus", "Empathie"),
            ("Chercher des alternatives malines", "Pens√©e critique"),
            ("G√©rer ta frustration et rebondir", "Intelligence √©motionnelle"),
        ],
    },
    {
        "id": 5,
        "text": "üêâ Tu trouves un b√©b√© dragon sous ton bureau. Premi√®re instinct ?",
        "options": [
            ("Le nourrir et le rassurer", "Empathie"),
            ("L‚Äôobserver avant d‚Äôagir", "Pens√©e critique"),
            ("Appeler ton √©quipe pour d√©cider ensemble", "Confiance"),
            ("Arriver √† la prochaine r√©union en le montant fi√®rement", "Agilit√©"),
        ],
    },
    {
        "id": 6,
        "text": "üìä On te parachute sur un projet totalement hors de ton expertise. Ton mindset ?",
        "options": [
            ("Prendre une petite partie et apprendre vite", "Agilit√©"),
            ("Monter un sprint d‚Äôapprentissage pour t‚Äôadapter", "Adaptabilit√©"),
            ("Bosser en bin√¥me avec un expert", "Confiance"),
            ("Reconna√Ætre ton stress mais organiser des check-ins", "Intelligence √©motionnelle"),
        ],
    },
    {
        "id": 7,
        "text": "ü§ê Un coll√®gue te confie ses doutes confidentiels sur le projet. Que fais-tu ?",
        "options": [
            ("Garder √ßa pour toi et l‚Äôaider √† trouver un plan", "Confiance"),
            ("Lui laisser de l‚Äôespace et revenir demain", "Empathie"),
            ("Chercher la racine du probl√®me avant de r√©agir", "Pens√©e critique"),
            ("Proposer un mini-test rapide pour valider une piste", "Agilit√©"),
        ],
    },
    {
        "id": 8,
        "text": "üìâ Tu re√ßois un feedback n√©gatif inattendu. Ta premi√®re r√©action ?",
        "options": [
            ("Remercier et demander des d√©tails", "Intelligence √©motionnelle"),
            ("S√©parer le bruit des signaux utiles", "Pens√©e critique"),
            ("Adapter ton plan pour la prochaine fois", "Adaptabilit√©"),
            ("Rassurer sur ton engagement et ta fiabilit√©", "Confiance"),
        ],
    },
    {
        "id": 9,
        "text": "üîÑ Changement de scope √† la derni√®re minute (encore üòÖ). Ton move ?",
        "options": [
            ("Reprioriser vite ce qui est faisable", "Adaptabilit√©"),
            ("Revalider les hypoth√®ses et contraintes", "Pens√©e critique"),
            ("Lancer un micro-plan pour avancer quand m√™me", "Agilit√©"),
            ("Clarifier les attentes avec tout le monde", "Confiance"),
        ],
    },
    {
        "id": 10,
        "text": "üèÉ Tu m√®nes un sprint et un membre gal√®re √† suivre. R√©action ?",
        "options": [
            ("V√©rifier en priv√© et √©couter", "Empathie"),
            ("R√©√©quilibrer les t√¢ches pour l‚Äôaider", "Agilit√©"),
            ("Reposer clairement les attentes mutuelles", "Confiance"),
            ("Identifier les goulots d‚Äô√©tranglement", "Pens√©e critique"),
        ],
    },
]

# ---------- State ----------
if "page" not in st.session_state:
    st.session_state.page = -1
if "answers" not in st.session_state:
    st.session_state.answers = {}
if "info" not in st.session_state:
    st.session_state.info = {}

# ---------- PDF Generator ----------
def generate_pdf(name, email, scores, top_skill, emoji, low_skill, chart_file):
    file_path = f"report_{name.replace(' ', '_')}.pdf"
    doc = SimpleDocTemplate(file_path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph("<b>Soft Skills Report</b>", styles['Title']))
    story.append(Spacer(1, 12))
    story.append(Paragraph(f"Nom: {name}", styles['Normal']))
    story.append(Paragraph(f"Email: {email}", styles['Normal']))
    story.append(Spacer(1, 12))

    # Strength
    story.append(Paragraph(f"üèÜ Ton atout majeur: {emoji} {top_skill}", styles['Heading2']))
    story.append(Paragraph(EXPLANATIONS[top_skill], styles['Normal']))
    story.append(Spacer(1, 12))

    # Weakness tip
    story.append(Paragraph(f"üí° Piste d‚Äôam√©lioration: {low_skill}", styles['Heading2']))
    story.append(Paragraph(TIPS[low_skill], styles['Normal']))
    story.append(Spacer(1, 12))

    # Radar chart image
    story.append(Image(chart_file, width=400, height=400))
    story.append(Spacer(1, 12))

    doc.build(story)
    return file_path

# ---------- Welcome ----------
if st.session_state.page == -1:
    st.title("üß≠ Soft Skills Assessment Quiz")
    st.write("R√©ponds √† 10 sc√©narios amusants et d√©couvre ton **profil soft skills** √† la fin.")

    with st.form("userinfo"):
        name = st.text_input("Pr√©nom et Nom")
        email = st.text_input("Adresse e-mail")
        start = st.form_submit_button("üöÄ Commencer le quiz")

        if start:
            if not name or not email:
                st.error("Merci de remplir au minimum **Nom + Email**.")
            else:
                st.session_state.info = {"name": name, "email": email}
                st.session_state.page = 0
                st.rerun()

# ---------- Questions ----------
elif st.session_state.page < len(QUESTIONS):
    q = QUESTIONS[st.session_state.page]
    progress = (st.session_state.page) / len(QUESTIONS)
    st.progress(progress)

    st.subheader(f"Question {st.session_state.page+1} / {len(QUESTIONS)}")
    st.write(q["text"])

    for i, (opt_text, _skill) in enumerate(q["options"]):
        if st.button(opt_text, key=f"q{q['id']}-opt{i}", use_container_width=True):
            st.session_state.answers[q["id"]] = opt_text
            st.session_state.page += 1
            st.rerun()

    if st.session_state.page > 0:
        if st.button("‚¨ÖÔ∏è Retour"):
            st.session_state.page -= 1
            st.rerun()

# ---------- Results ----------
else:
    st.success("‚ú® Voici ton profil !")

    # Count scores
    raw_counts = {s: 0 for s in SKILLS}
    total_per_skill = {s: 0 for s in SKILLS}
    for q in QUESTIONS:
        for _, skill in q["options"]:
            total_per_skill[skill] += 1
        chosen = st.session_state.answers.get(q["id"])
        if chosen:
            for opt_text, skill in q["options"]:
                if opt_text == chosen:
                    raw_counts[skill] += 1

    scores = {s: round(100 * raw_counts[s] / total_per_skill[s], 1) if total_per_skill[s] else 0 for s in SKILLS}

    # Top and low skills
    top_skill = max(scores, key=scores.get)
    low_skill = min(scores, key=scores.get)
    emoji = SKILLS[top_skill]

    st.markdown(
        f"## üèÜ Ton atout majeur : **{emoji} {top_skill}**\n"
        f"Bravo {st.session_state.info['name']} ‚Äî voici ton profil üëá"
    )

    # ---------- Fancy Multi-Colored Radar ----------
    colors = {
        "Empathie": "#FF6F61",
        "Pens√©e critique": "#6A5ACD",
        "Adaptabilit√©": "#20B2AA",
        "Confiance": "#FFD700",
        "Intelligence √©motionnelle": "#FF69B4",
        "Agilit√©": "#00CED1"
    }

    labels = list(SKILLS.keys())
    vals = [scores[s] for s in labels]
    vals += vals[:1]

    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=vals,
        theta=labels + [labels[0]],
        fill='toself',
        line=dict(color='black', width=3),
        fillcolor='rgba(255, 182, 193, 0.4)',
        name="Profil global"
    ))

    for skill, val in scores.items():
        fig.add_trace(go.Scatterpolar(
            r=[val],
            theta=[skill],
            mode="markers+text",
            marker=dict(size=16, color=colors[skill], line=dict(width=2, color="black")),
            text=[f"{val}%"],
            textposition="top center",
            name=f"{skill}: {val}%"
        ))

    max_val = max(scores.values()) if max(scores.values()) > 0 else 100
    fig.update_layout(
        polar=dict(
            radialaxis=dict(visible=True, range=[0, max_val + 10]),
            angularaxis=dict(tickfont=dict(size=14))
        ),
        showlegend=True,
        title="üåü Ton radar"
    )

    st.plotly_chart(fig, use_container_width=True)

    # Save chart as image for PDF
    chart_file = "radar.png"
    fig.write_image(chart_file)

    # Generate PDF
    pdf_file = generate_pdf(
        st.session_state.info["name"],
        st.session_state.info["email"],
        scores,
        top_skill,
        emoji,
        low_skill,
        chart_file
    )
    with open(pdf_file, "rb") as f:
        st.download_button("‚¨áÔ∏è T√©l√©charger ton rapport PDF", f, file_name=pdf_file, mime="application/pdf")

    if st.button("üîÅ Refaire le test"):
        st.session_state.page = -1
        st.session_state.answers = {}
        st.session_state.info = {}
        st.rerun()

